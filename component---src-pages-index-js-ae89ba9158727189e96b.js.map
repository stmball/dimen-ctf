{"version":3,"file":"component---src-pages-index-js-ae89ba9158727189e96b.js","mappings":"uJAkCA,IA/BY,MACGA,EAAAA,EAAAA,gBAAe,cAe5B,OACE,uBAAKC,UAAU,OACb,yBAAG,qcASC,C,+CCAV,IA3Be,IAAoC,IAAnC,SAAEC,EAAQ,MAAEC,EAAK,SAAEC,GAAU,EAC3C,MACMC,EADcC,gBACDJ,EAASK,SAC5B,IAAIC,EAgBJ,OAbEA,EADEH,EAEA,sBAAIJ,UAAU,gBACZ,gBAAC,EAAAQ,KAAI,CAACC,GAAG,KAAKP,IAKhB,gBAAC,EAAAM,KAAI,CAACR,UAAU,mBAAmBS,GAAG,KACnCP,GAML,uBAAKF,UAAU,iBAAiB,oBAAmBI,GACjD,0BAAQJ,UAAU,iBAAiBO,GACnC,4BAAOJ,GACH,C,+CCuBV,IAvCY,IAAuC,IAAD,UAArC,YAAEO,EAAW,MAAER,EAAK,SAAEC,GAAU,EAC3C,MAAM,KAAEQ,IAASZ,EAAAA,EAAAA,gBAAe,cAgB1Ba,EAAkBF,GAAeC,EAAKE,aAAaH,YACnDI,EAAgC,QAApB,EAAGH,EAAKE,oBAAY,aAAjB,EAAmBX,MAExC,OACE,gCACE,6BAAQY,EAAkBZ,EAAK,MAAMY,EAAiBZ,GACtD,wBAAMa,KAAK,cAAcC,QAASJ,IAClC,wBAAMK,SAAS,WAAWD,QAASd,IACnC,wBAAMe,SAAS,iBAAiBD,QAASJ,IACzC,wBAAMK,SAAS,UAAUD,QAAQ,YACjC,wBAAMD,KAAK,eAAeC,QAAQ,YAClC,wBACED,KAAK,kBACLC,SAA0B,QAAjB,EAAAL,EAAKE,oBAAY,OAAQ,QAAR,EAAjB,EAAmBK,cAAM,WAAR,EAAjB,EAA2BC,UAAO,KAE7C,wBAAMJ,KAAK,gBAAgBC,QAASd,IACpC,wBAAMa,KAAK,sBAAsBC,QAASJ,IACzCT,EACA,C,oJCzCP,SAASiB,EAAc,GAAW,IAAX,KAAEC,GAAM,EAC7B,OACE,gBAAC,EAAAb,KAAI,CAACR,UAAU,OAAOS,GAAIY,EAAKC,OAAOC,KAAMC,SAAS,OACpD,8BAASH,EAAKI,YAAYvB,OACzBmB,EAAKI,YAAYC,OAGxB,CAEe,SAASC,EAAc,GAAY,IAAZ,MAAEC,GAAO,EAC7C,OACE,uBAAKC,GAAG,kBACLD,EAAME,KAAI,CAACT,EAAMU,KAChBC,QAAQC,IAAIZ,GACL,gBAACD,EAAa,CAACc,IAAKH,EAAKV,KAAMA,OAI9C,CCOA,MArBkB,IAAyB,IAAD,MAAvB,KAAEc,EAAI,SAAElC,GAAU,EACnC,MAAMmC,GAAkC,QAAtB,EAAAD,EAAKxB,KAAKE,oBAAY,aAAtB,EAAwBX,QAAK,QACzC0B,EAAQO,EAAKE,kBAAkBC,MAErC,OAAqB,IAAjBV,EAAMW,OAEN,gBAAC,IAAM,CAACtC,SAAUA,EAAUC,MAAOkC,GACjC,gBAAC,IAAG,MACJ,yBAAG,8DAMP,gBAAC,IAAM,CAACnC,SAAUA,EAAUC,MAAOkC,GACjC,gBAAC,IAAG,MACJ,gBAACT,EAAa,CAACC,MAAOA,IACf,EAWN,MAAMY,EAAO,IAAM,gBAAC,IAAG,CAACtC,MAAM,a","sources":["webpack://gatsby-starter-blog/./src/components/bio.js","webpack://gatsby-starter-blog/./src/components/layout.js","webpack://gatsby-starter-blog/./src/components/seo.js","webpack://gatsby-starter-blog/./src/components/challenge-grid.js","webpack://gatsby-starter-blog/./src/pages/index.js"],"sourcesContent":["import * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n\n  return (\n    <div className=\"bio\">\n      <p>\n        Welcome to the DiMeN DTP Data Treasure Hunt! Below are a set of\n        challenges you will need to complete as a group. When you complete a\n        challenge, you will need to submit your answer to the front of the room\n        to one of the helpers, who will keep track of your team's score. The\n        challenges are labelled with how many points they are worth - the\n        high-scoring challenges tend to be harder, and you might need to find\n        creative ways to solve them. Good luck!\n      </p>\n    </div>\n  )\n}\n\nexport default Bio\n","import * as React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n    </div>\n  )\n}\n\nexport default Layout\n","/**\n * SEO component that queries for data with\n * Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/how-to/querying-data/use-static-query/\n */\n\nimport * as React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst Seo = ({ description, title, children }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            social {\n              twitter\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <>\n      <title>{defaultTitle ? `${title} | ${defaultTitle}` : title}</title>\n      <meta name=\"description\" content={metaDescription} />\n      <meta property=\"og:title\" content={title} />\n      <meta property=\"og:description\" content={metaDescription} />\n      <meta property=\"og:type\" content=\"website\" />\n      <meta name=\"twitter:card\" content=\"summary\" />\n      <meta\n        name=\"twitter:creator\"\n        content={site.siteMetadata?.social?.twitter || ``}\n      />\n      <meta name=\"twitter:title\" content={title} />\n      <meta name=\"twitter:description\" content={metaDescription} />\n      {children}\n    </>\n  )\n}\n\nexport default Seo\n","import * as React from \"react\"\n\nimport { Link } from \"gatsby\"\n\nfunction ChallengeCell({ post }) {\n  return (\n    <Link className=\"cell\" to={post.fields.slug} itemProp=\"url\">\n      <strong>{post.frontmatter.title}</strong>\n      {post.frontmatter.points}\n    </Link>\n  )\n}\n\nexport default function ChallengeGrid({ posts }) {\n  return (\n    <div id=\"challenge-grid\">\n      {posts.map((post, idx) => {\n        console.log(post)\n        return <ChallengeCell key={idx} post={post} />\n      })}\n    </div>\n  )\n}\n","import * as React from \"react\"\nimport { graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport Seo from \"../components/seo\"\nimport ChallengeGrid from \"../components/challenge-grid\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const posts = data.allMarkdownRemark.nodes\n\n  if (posts.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <Bio />\n        <p>No challenges found. Add markdown posts to \"content/blog\"</p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <Bio />\n      <ChallengeGrid posts={posts} />\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\n/**\n * Head export to define metadata for the page\n *\n * See: https://www.gatsbyjs.com/docs/reference/built-in-components/gatsby-head/\n */\nexport const Head = () => <Seo title=\"All posts\" />\n\nexport const pageQuery = graphql`\n  {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }) {\n      nodes {\n        excerpt\n        fields {\n          slug\n        }\n        frontmatter {\n          date(formatString: \"MMMM DD, YYYY\")\n          title\n          description\n          points\n        }\n      }\n    }\n  }\n`\n"],"names":["useStaticQuery","className","location","title","children","isRootPath","__PATH_PREFIX__","pathname","header","Link","to","description","site","metaDescription","siteMetadata","defaultTitle","name","content","property","social","twitter","ChallengeCell","post","fields","slug","itemProp","frontmatter","points","ChallengeGrid","posts","id","map","idx","console","log","key","data","siteTitle","allMarkdownRemark","nodes","length","Head"],"sourceRoot":""}